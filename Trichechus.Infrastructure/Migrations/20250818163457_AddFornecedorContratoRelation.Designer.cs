// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Trichechus.Infrastructure.Context;

#nullable disable

namespace Trichechus.Infrastructure.Migrations
{
    [DbContext(typeof(TrichechusDbContext))]
    [Migration("20250818163457_AddFornecedorContratoRelation")]
    partial class AddFornecedorContratoRelation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.15");

            modelBuilder.Entity("BaseDadosSoftware", b =>
                {
                    b.Property<Guid>("BaseDadosId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SoftwareId")
                        .HasColumnType("TEXT");

                    b.HasKey("BaseDadosId", "SoftwareId");

                    b.HasIndex("SoftwareId");

                    b.ToTable("BaseDadosSoftware");
                });

            modelBuilder.Entity("ContratoFornecedor", b =>
                {
                    b.Property<Guid>("ContratoId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FornecedorId")
                        .HasColumnType("TEXT");

                    b.HasKey("ContratoId", "FornecedorId");

                    b.HasIndex("FornecedorId");

                    b.ToTable("ContratoFornecedor");
                });

            modelBuilder.Entity("FuncionalidadePerfil", b =>
                {
                    b.Property<Guid>("FuncionalidadeId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PerfilId")
                        .HasColumnType("TEXT");

                    b.HasKey("FuncionalidadeId", "PerfilId");

                    b.HasIndex("PerfilId");

                    b.ToTable("PerfilFuncionalidade", (string)null);
                });

            modelBuilder.Entity("PerfilUsuario", b =>
                {
                    b.Property<Guid>("PerfilId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("TEXT");

                    b.HasKey("PerfilId", "UsuarioId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("UsuarioPerfil", (string)null);
                });

            modelBuilder.Entity("Trichechus.Domain.Entities.Atividade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("DateTime2")
                        .HasColumnName("AtualizadoEm");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("DateTime2")
                        .HasColumnName("CriadoEm");

                    b.Property<DateTime?>("DeletadoEm")
                        .HasColumnType("DateTime2")
                        .HasColumnName("DeletadoEm");

                    b.Property<string>("Descricao")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("NomeEquipeResponsavel")
                        .HasColumnType("TEXT");

                    b.Property<string>("NomeResponsavel")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Prazo")
                        .HasColumnType("DateTime2")
                        .HasColumnName("Prazo");

                    b.Property<string>("Situacao")
                        .HasColumnType("TEXT");

                    b.Property<string>("TipoEntrada")
                        .HasColumnType("TEXT");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Atividade");
                });

            modelBuilder.Entity("Trichechus.Domain.Entities.BaseDados", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Cluster")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Cluster");

                    b.Property<string>("NomeBaseDados")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("NomeBaseDados");

                    b.Property<string>("Versao")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Versao");

                    b.HasKey("Id");

                    b.ToTable("BaseDados");
                });

            modelBuilder.Entity("Trichechus.Domain.Entities.Catalogo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Ativo")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("Ativo");

                    b.Property<string>("CatalogoEquipe")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CatalogoEquipe");

                    b.Property<string>("HelixCategoria")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("HelixCategoria");

                    b.Property<string>("HelixEquipe")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("HelixEquipe");

                    b.Property<string>("HelixId")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("HelixId");

                    b.Property<string>("HelixService")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("HelixService");

                    b.Property<string>("HelixSubcategoria")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("HelixSubcategoria");

                    b.Property<string>("Observacao")
                        .HasColumnType("Text")
                        .HasColumnName("Observacao");

                    b.Property<Guid?>("SoftwareId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SoftwareId");

                    b.ToTable("Catalogo");
                });

            modelBuilder.Entity("Trichechus.Domain.Entities.Contrato", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AreaGestora")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("AreaGestora");

                    b.Property<string>("Ativo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Fim")
                        .HasColumnType("DateTime2")
                        .HasColumnName("Fim");

                    b.Property<string>("Gerencia")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Gerencia");

                    b.Property<DateTime>("Inicio")
                        .HasColumnType("DateTime2")
                        .HasColumnName("Inicio");

                    b.Property<string>("NomeAlias")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("NomeAlias");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("varchar(12)")
                        .HasColumnName("Numero");

                    b.Property<string>("Objeto")
                        .IsRequired()
                        .HasColumnType("Text")
                        .HasColumnName("Objeto");

                    b.HasKey("Id");

                    b.ToTable("Contrato");
                });

            modelBuilder.Entity("Trichechus.Domain.Entities.Fornecedor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Ativo")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Ativo");

                    b.Property<string>("CPFCNPJ")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("CPFCNPJ");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Cep");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Cidade");

                    b.Property<string>("Descricao")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Nome");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Endereco");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Estado");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Numero");

                    b.HasKey("Id");

                    b.ToTable("Fornecedor", t =>
                        {
                            t.Property("Nome")
                                .HasColumnName("Nome1");
                        });
                });

            modelBuilder.Entity("Trichechus.Domain.Entities.Funcionalidade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Nome")
                        .IsUnique();

                    b.ToTable("Funcionalidade");
                });

            modelBuilder.Entity("Trichechus.Domain.Entities.Perfil", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Nome")
                        .IsUnique();

                    b.ToTable("Perfil");
                });

            modelBuilder.Entity("Trichechus.Domain.Entities.Repositorio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Endereco");

                    b.Property<Guid?>("SoftwareId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Tipo");

                    b.HasKey("Id");

                    b.HasIndex("SoftwareId");

                    b.ToTable("Repositorio");
                });

            modelBuilder.Entity("Trichechus.Domain.Entities.Software", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ContratoId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Descontinuado")
                        .HasColumnType("DateTime2")
                        .HasColumnName("Descontinuado");

                    b.Property<string>("Descricao")
                        .HasColumnType("Text")
                        .HasColumnName("Descricao");

                    b.Property<string>("EntrarCatalogo")
                        .IsRequired()
                        .HasColumnType("varchar(3)")
                        .HasColumnName("EntrarCatalogo");

                    b.Property<string>("LicencaSoftware")
                        .IsRequired()
                        .HasColumnType("varchar(3)")
                        .HasColumnName("LicencaSoftware");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Nome");

                    b.Property<string>("ProdutoSoftware")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ProdutoSoftware");

                    b.Property<string>("Segmento")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Segmento");

                    b.Property<string>("Situacao")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Situacao");

                    b.Property<string>("Tecnologia")
                        .IsRequired()
                        .HasColumnType("Text")
                        .HasColumnName("Tecnologia");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Tipo");

                    b.HasKey("Id");

                    b.HasIndex("ContratoId");

                    b.ToTable("Software");
                });

            modelBuilder.Entity("Trichechus.Domain.Entities.Tarefa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AtividadeId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("DateTime2")
                        .HasColumnName("AtualizadoEm");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("DateTime2")
                        .HasColumnName("CriadoEm");

                    b.Property<DateTime?>("DeletadoEm")
                        .HasColumnType("DateTime2")
                        .HasColumnName("DeletadoEm");

                    b.Property<string>("Descricao")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("NomeResponsavel")
                        .HasColumnType("TEXT");

                    b.Property<string>("Observacao")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Prazo")
                        .HasColumnType("DateTime2")
                        .HasColumnName("Prazo");

                    b.Property<string>("Situacao")
                        .HasColumnType("TEXT");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AtividadeId");

                    b.ToTable("Tarefa");
                });

            modelBuilder.Entity("Trichechus.Domain.Entities.URL", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Ambiente")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Ambiente");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Endereco");

                    b.Property<string>("IP")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("IP");

                    b.Property<string>("Servidor")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Servidor");

                    b.Property<Guid?>("SoftwareId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SoftwareId");

                    b.ToTable("URL");
                });

            modelBuilder.Entity("Trichechus.Domain.Entities.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Ativo")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("DateTime2")
                        .HasColumnName("AtualizadoEm");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("DateTime2")
                        .HasColumnName("CriadoEm");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Equipe")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Matricula")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("SenhaHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("BaseDadosSoftware", b =>
                {
                    b.HasOne("Trichechus.Domain.Entities.BaseDados", null)
                        .WithMany()
                        .HasForeignKey("BaseDadosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Trichechus.Domain.Entities.Software", null)
                        .WithMany()
                        .HasForeignKey("SoftwareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ContratoFornecedor", b =>
                {
                    b.HasOne("Trichechus.Domain.Entities.Contrato", null)
                        .WithMany()
                        .HasForeignKey("ContratoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Trichechus.Domain.Entities.Fornecedor", null)
                        .WithMany()
                        .HasForeignKey("FornecedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FuncionalidadePerfil", b =>
                {
                    b.HasOne("Trichechus.Domain.Entities.Funcionalidade", null)
                        .WithMany()
                        .HasForeignKey("FuncionalidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Trichechus.Domain.Entities.Perfil", null)
                        .WithMany()
                        .HasForeignKey("PerfilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PerfilUsuario", b =>
                {
                    b.HasOne("Trichechus.Domain.Entities.Perfil", null)
                        .WithMany()
                        .HasForeignKey("PerfilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Trichechus.Domain.Entities.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Trichechus.Domain.Entities.Catalogo", b =>
                {
                    b.HasOne("Trichechus.Domain.Entities.Software", null)
                        .WithMany("Catalogo")
                        .HasForeignKey("SoftwareId");
                });

            modelBuilder.Entity("Trichechus.Domain.Entities.Repositorio", b =>
                {
                    b.HasOne("Trichechus.Domain.Entities.Software", null)
                        .WithMany("Repositorio")
                        .HasForeignKey("SoftwareId");
                });

            modelBuilder.Entity("Trichechus.Domain.Entities.Software", b =>
                {
                    b.HasOne("Trichechus.Domain.Entities.Contrato", null)
                        .WithMany("Software")
                        .HasForeignKey("ContratoId");
                });

            modelBuilder.Entity("Trichechus.Domain.Entities.Tarefa", b =>
                {
                    b.HasOne("Trichechus.Domain.Entities.Atividade", "Atividade")
                        .WithMany("Tarefa")
                        .HasForeignKey("AtividadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Atividade");
                });

            modelBuilder.Entity("Trichechus.Domain.Entities.URL", b =>
                {
                    b.HasOne("Trichechus.Domain.Entities.Software", null)
                        .WithMany("URL")
                        .HasForeignKey("SoftwareId");
                });

            modelBuilder.Entity("Trichechus.Domain.Entities.Atividade", b =>
                {
                    b.Navigation("Tarefa");
                });

            modelBuilder.Entity("Trichechus.Domain.Entities.Contrato", b =>
                {
                    b.Navigation("Software");
                });

            modelBuilder.Entity("Trichechus.Domain.Entities.Software", b =>
                {
                    b.Navigation("Catalogo");

                    b.Navigation("Repositorio");

                    b.Navigation("URL");
                });
#pragma warning restore 612, 618
        }
    }
}
